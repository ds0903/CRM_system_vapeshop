from aiogram import Router, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from entities.models import User, RegistrationRequest, City
from bot.utils.security import hash_password

router = Router()


class RegistrationStates(StatesGroup):
    waiting_for_password = State()
    waiting_for_password_confirm = State()
    waiting_for_city = State()


@router.message(Command("register"))
async def cmd_register(message: Message, state: FSMContext, session: AsyncSession):
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π
    result = await session.execute(
        select(User).where(User.tg_id == message.from_user.id)
    )
    existing_user = result.scalar_one_or_none()
    
    if existing_user:
        await message.answer("–í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ –≤ —Å–∏—Å—Ç–µ–º—ñ!")
        return
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ —î –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    result = await session.execute(
        select(RegistrationRequest).where(
            RegistrationRequest.tg_id == message.from_user.id,
            RegistrationRequest.status == "pending"
        )
    )
    existing_request = result.scalar_one_or_none()
    
    if existing_request:
        await message.answer("–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤–∂–µ –≤ –æ–±—Ä–æ–±—Ü—ñ. –ó–∞—á–µ–∫–∞–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    username = message.from_user.username or f"user_{message.from_user.id}"
    
    await message.answer(
        f"üìù <b>–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –≤ —Å–∏—Å—Ç–µ–º—ñ</b>\n\n"
        f"–í —è–∫–æ—Å—Ç—ñ –ª–æ–≥—ñ–Ω–∞ –±—É–¥–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–∏–π –≤–∞—à username: <code>@{username}</code>\n\n"
        f"–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å (–º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤):",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await state.update_data(username=username)
    await state.set_state(RegistrationStates.waiting_for_password)


@router.message(RegistrationStates.waiting_for_password)
async def process_password(message: Message, state: FSMContext):
    password = message.text
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    try:
        await message.delete()
    except:
        pass
    
    if len(password) < 6:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –º—ñ–Ω—ñ–º—É–º 6 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑:")
        return
    
    await state.update_data(password=password)
    await message.answer("üîê –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –ø–∞—Ä–æ–ª—å –¥–ª—è –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è:")
    await state.set_state(RegistrationStates.waiting_for_password_confirm)


@router.message(RegistrationStates.waiting_for_password_confirm)
async def process_password_confirm(message: Message, state: FSMContext, session: AsyncSession):
    password_confirm = message.text
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø–∞—Ä–æ–ª–µ–º –¥–ª—è –±–µ–∑–ø–µ–∫–∏
    try:
        await message.delete()
    except:
        pass
    
    data = await state.get_data()
    password = data.get("password")
    
    if password != password_confirm:
        await message.answer("‚ùå –ü–∞—Ä–æ–ª—ñ –Ω–µ —Å–ø—ñ–≤–ø–∞–¥–∞—é—Ç—å. –í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä–æ–ª—å —â–µ —Ä–∞–∑:")
        await state.set_state(RegistrationStates.waiting_for_password)
        return
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –º—ñ—Å—Ç
    result = await session.execute(
        select(City).where(City.is_active == True)
    )
    cities = result.scalars().all()
    
    if not cities:
        await message.answer("‚ùå –ù–∞ –∂–∞–ª—å, –Ω–∞—Ä–∞–∑—ñ –Ω–µ–º–∞—î –¥–æ—Å—Ç—É–ø–Ω–∏—Ö –º—ñ—Å—Ç. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        await state.clear()
        return
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ –º—ñ—Å—Ç–∞–º–∏
    keyboard_buttons = []
    row = []
    for city in cities:
        row.append(KeyboardButton(text=city.name))
        if len(row) == 2:
            keyboard_buttons.append(row)
            row = []
    if row:
        keyboard_buttons.append(row)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer(
        "üèôÔ∏è –í–∏–±–µ—Ä—ñ—Ç—å –≤–∞—à–µ –º—ñ—Å—Ç–æ:",
        reply_markup=keyboard
    )
    await state.set_state(RegistrationStates.waiting_for_city)


@router.message(RegistrationStates.waiting_for_city)
async def process_city(message: Message, state: FSMContext, session: AsyncSession):
    city_name = message.text
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –º—ñ—Å—Ç–æ
    result = await session.execute(
        select(City).where(City.name == city_name, City.is_active == True)
    )
    city = result.scalar_one_or_none()
    
    if not city:
        await message.answer("‚ùå –¢–∞–∫–µ –º—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –í–∏–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏.")
        return
    
    data = await state.get_data()
    username = data.get("username")
    password = data.get("password")
    
    # –•–µ—à—É—î–º–æ –ø–∞—Ä–æ–ª—å
    password_hash = hash_password(password)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é
    registration_request = RegistrationRequest(
        tg_id=message.from_user.id,
        username=username,
        password_hash=password_hash,
        city_id=city.id,
        status="pending"
    )
    
    session.add(registration_request)
    await session.commit()
    
    await message.answer(
        "‚úÖ <b>–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
        f"–ú—ñ—Å—Ç–æ: <b>{city.name}</b>\n"
        f"Username: <code>@{username}</code>\n\n"
        "‚è≥ –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.",
        reply_markup=ReplyKeyboardRemove()
    )
    
    await state.clear()
